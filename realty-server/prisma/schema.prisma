// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int           @id @default(autoincrement())
  email             String        @unique
  first_name        String
  last_name         String?
  password          String?
  address           String
  phone             String
  roleId            Int
  role              UserRole      @relation(fields: [roleId], references: [id])
  properties        Property[]
  appointmentClient Appointment[] @relation("client")
  appointmentAgent  Appointment[] @relation("agent")
}

model UserRole {
  id          Int    @id @default(autoincrement())
  description String
  users       User[]
}

model Property {
  id                 Int              @id @default(autoincrement())
  agentId            Int?
  title              String
  description        String
  area               Int
  floors             Int
  price              Decimal
  latitude           Decimal
  longitude          Decimal
  address            String
  mis_number         Int
  zipCode            Int
  baths              Int
  bedrooms           Int
  propertyTypeId     Int
  propertyCategoryId Int
  countyId           Int
  provinceId         Int
  cityId             Int
  neighbourhoodId    Int
  createdAt          DateTime         @default(now())
  agent              User?            @relation(fields: [agentId], references: [id])
  type               PropertyType     @relation(fields: [propertyTypeId], references: [id])
  county             County           @relation(fields: [countyId], references: [id])
  province           Province         @relation(fields: [provinceId], references: [id])
  city               City             @relation(fields: [cityId], references: [id])
  neighbourhood      Neighbourhood    @relation(fields: [neighbourhoodId], references: [id])
  propertyCategory   PropertyCategory @relation(fields: [propertyCategoryId], references: [id])
  appointments       Appointment[]
  propertyImages     PropertyImage[]
}

model PropertyType {
  id          Int        @id @default(autoincrement())
  description String
  property    Property[]
}

model PropertyCategory {
  id          Int                @id @default(autoincrement())
  parentId    Int?
  description String
  parent      PropertyCategory?  @relation("category", fields: [parentId], references: [id])
  property    Property[]
  childs      PropertyCategory[] @relation("category")
}

model PropertyImage {
  id         Int      @id @default(autoincrement())
  propertyId Int
  name       String
  url        String
  property   Property @relation(fields: [propertyId], references: [id])
}

model Province {
  id           Int        @id @default(autoincrement())
  name         String
  abbreviation String     @unique
  counties     County[]
  properties   Property[]
}

model County {
  id                Int             @id @default(autoincrement())
  name              String
  fipscode          String          @unique
  stateAbbreviation String
  province          Province        @relation(fields: [stateAbbreviation], references: [abbreviation])
  cities            City[]
  neighbourhoods    Neighbourhood[]
  properties        Property[]
}

model City {
  id                Int             @id
  name              String
  countyFips        String
  stateAbbreviation String
  county            County          @relation(fields: [countyFips], references: [fipscode])
  neighbourhoods    Neighbourhood[]
  properties        Property[]
}

model Neighbourhood {
  id                Int        @id @default(autoincrement())
  name              String
  cityId            Int
  countyFips        String
  stateAbbreviation String
  city              City       @relation(fields: [cityId], references: [id])
  county            County     @relation(fields: [countyFips], references: [fipscode])
  properties        Property[]
}

model Appointment {
  id         Int      @id @default(autoincrement())
  clientId   Int
  agentId    Int
  propertyId Int
  date       DateTime
  comment    String
  email      String?
  phone      String?
  createdAt  DateTime @default(now())
  client     User     @relation("client", fields: [agentId], references: [id])
  agent      User     @relation("agent", fields: [clientId], references: [id])
  property   Property @relation(fields: [propertyId], references: [id])
}
